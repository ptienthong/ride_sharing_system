Object subclass: #Driver	instanceVariableNames: 'driverID_ name_ rating_ assignedRides_'	classVariableNames: ''	package: 'ShareRidingSystem'!!Driver methodsFor: 'initialization' stamp: '3/30/2025 23:24'!initializeWithName: name rating: rating    name_ := name.    rating_ := rating.    driverID_ := self class nextID.    assignedRides_ := OrderedCollection new.    ^ self.! !!Driver methodsFor: 'adding' stamp: '3/30/2025 23:25'!addRide: ride    assignedRides_ add: ride.    Transcript show: 'Ride added to driver: ', name_; cr.! !!Driver methodsFor: 'as yet unclassified' stamp: '3/30/2025 23:26'!getDriverInfo    Transcript show: 'Driver ID: ', driverID_ printString; cr.    Transcript show: 'Name: ', name_; cr.    Transcript show: 'Rating: ', rating_ printString; cr.    Transcript show: 'Assigned Rides: ', assignedRides_ size printString; cr.    Transcript show: '-----------------------------'; cr.! !!Driver methodsFor: 'as yet unclassified' stamp: '3/30/2025 23:34'!getID	^ driverID_.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Driver class	instanceVariableNames: ''!!Driver class methodsFor: 'instance creation' stamp: '3/30/2025 23:23'!newDriverWithName: name rating: rating    ^ self new initializeWithName: name rating: rating; yourself.! !!Driver class methodsFor: 'as yet unclassified' stamp: '3/30/2025 23:25'!nextID    Smalltalk at: #DriverCounter ifAbsentPut: [0].    Smalltalk at: #DriverCounter put: (Smalltalk at: #DriverCounter) + 1.    ^ Smalltalk at: #DriverCounter.! !Object subclass: #Rider	instanceVariableNames: 'riderID_ name_ requestedRides_'	classVariableNames: ''	package: 'ShareRidingSystem'!!Rider methodsFor: 'initialization' stamp: '3/30/2025 23:29'!initializeWithName: name    name_ := name.    "Assign a unique ID to the rider"    riderID_ := self class nextID.    requestedRides_ := OrderedCollection new.    ^ self.! !!Rider methodsFor: 'as yet unclassified' stamp: '3/30/2025 23:30'!requestRide: ride    requestedRides_ add: ride.    Transcript show: 'Ride requested by rider: ', name_; cr.! !!Rider methodsFor: 'as yet unclassified' stamp: '3/30/2025 23:30'!viewRides    Transcript show: 'Rides requested by ', name_, ':'; cr.    requestedRides_ isEmpty         ifTrue: [Transcript show: 'No rides requested.'; cr]        ifFalse: [            requestedRides_ do: [:ride |                ride rideDetails.            ].        ].! !!Rider methodsFor: 'as yet unclassified' stamp: '3/30/2025 23:34'!getID 	^ riderID_.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Rider class	instanceVariableNames: ''!!Rider class methodsFor: 'instance creation' stamp: '3/30/2025 23:28'!newRiderWithName: name    ^ self new initializeWithName: name; yourself.! !!Rider class methodsFor: 'as yet unclassified' stamp: '3/30/2025 23:29'!nextID    Smalltalk at: #RiderCounter ifAbsentPut: [0].    Smalltalk at: #RiderCounter put: (Smalltalk at: #RiderCounter) + 1.    ^ Smalltalk at: #RiderCounter.! !Object subclass: #SharingRideSystem	instanceVariableNames: 'drivers_ riders_ driverQueue_ riderQueue_'	classVariableNames: ''	package: 'ShareRidingSystem'!!SharingRideSystem methodsFor: 'initialization' stamp: '3/30/2025 23:32'!initialize    drivers_ := Dictionary new.    riders_ := Dictionary new.    driverQueue_ := OrderedCollection new.    riderQueue_ := OrderedCollection new.    Transcript show: 'SharingRideSystem created'; cr.! !!SharingRideSystem methodsFor: 'adding' stamp: '3/30/2025 23:35'!addDriver: driver    drivers_ at: driver getID put: driver.    self addDrivertoQueue: driver.! !!SharingRideSystem methodsFor: 'adding' stamp: '3/30/2025 23:35'!addRider: rider    riders_ at: rider getID put: rider.    self addRidertoQueue: rider.! !!SharingRideSystem methodsFor: 'adding' stamp: '3/30/2025 23:36'!addDrivertoQueue: driver    driverQueue_ add: driver.! !!SharingRideSystem methodsFor: 'adding' stamp: '3/30/2025 23:36'!addRidertoQueue: rider    riderQueue_ add: rider.! !!SharingRideSystem methodsFor: 'as yet unclassified' stamp: '3/30/2025 23:37'!getRider    ^ riderQueue_ isEmpty ifTrue: [nil] ifFalse: [riderQueue_ removeFirst].! !!SharingRideSystem methodsFor: 'as yet unclassified' stamp: '3/30/2025 23:37'!getDriver    ^ driverQueue_ isEmpty ifTrue: [nil] ifFalse: [driverQueue_ removeFirst].! !!SharingRideSystem methodsFor: 'as yet unclassified' stamp: '3/30/2025 23:38'!createRidePickup: pickup dropoff: dropoff distance: distance rideType: rideType    ^ (rideType = 1)        ifTrue: [StandardRide newRideWithPickup: pickup dropoff: dropoff distance: distance]        ifFalse: [PremiumRide newRideWithPickup: pickup dropoff: dropoff distance: distance].! !Object subclass: #Ride	instanceVariableNames: 'rideID_ pickup_ dropoff_ distance_'	classVariableNames: ''	package: 'ShareRidingSystem'!!Ride methodsFor: 'initialization' stamp: '3/30/2025 23:12'!initializeWithPickup: pickup dropoff: dropoff distance: distance [    rideID_ := self class nextID.    pickup_ := pickup.    dropoff_ := dropoff.    distance_ := distance.    ^ self.]! !!Ride methodsFor: 'as yet unclassified' stamp: '3/30/2025 23:12'!calculateFare [    self subclassResponsibility.]! !!Ride methodsFor: 'as yet unclassified' stamp: '3/30/2025 23:14'!rideDetails [    Transcript show: 'Ride ID: ', rideID_ printString; cr;        show: 'Pickup: ', pickup_; cr;        show: 'Dropoff: ', dropoff_; cr;        show: 'Distance: ', distance_ printString, ' miles'; cr;        show: 'Fare: $', (self calculateFare) printString; cr.]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Ride class	instanceVariableNames: ''!!Ride class methodsFor: 'instance creation' stamp: '3/30/2025 23:10'!newRideWithPickup: pickup dropoff: dropoff distance: distance [    ^ self new initializeWithPickup: pickup dropoff: dropoff distance: distance; yourself.]! !!Ride class methodsFor: 'as yet unclassified' stamp: '3/30/2025 23:13'!nextID [    Smalltalk at: #RideCounter ifAbsentPut: [0].    Smalltalk at: #RideCounter put: (Smalltalk at: #RideCounter) + 1.    ^ Smalltalk at: #RideCounter.]! !Ride subclass: #StandardRide	instanceVariableNames: ''	classVariableNames: ''	package: 'ShareRidingSystem'!!StandardRide methodsFor: 'initialization' stamp: '3/30/2025 23:18'!initializeWithPickup: pickup dropoff: dropoff distance: distance    super initializeWithPickup: pickup dropoff: dropoff distance: distance.    ^ self.! !!StandardRide methodsFor: 'as yet unclassified' stamp: '3/30/2025 23:19'!calculateFare    ^ distance_ * 1.5.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!StandardRide class	instanceVariableNames: ''!!StandardRide class methodsFor: 'instance creation' stamp: '3/30/2025 23:17'!newRideWithPickup: pickup dropoff: dropoff distance: distance    | newRide |    newRide := self new.    newRide initializeWithPickup: pickup dropoff: dropoff distance: distance.    ^ newRide.! !Ride subclass: #PremiumRide	instanceVariableNames: ''	classVariableNames: ''	package: 'ShareRidingSystem'!!PremiumRide methodsFor: 'initialization' stamp: '3/30/2025 23:20'!initializeWithPickup: pickup dropoff: dropoff distance: distance    super initializeWithPickup: pickup dropoff: dropoff distance: distance.    ^ self.! !!PremiumRide methodsFor: 'as yet unclassified' stamp: '3/30/2025 23:20'!calculateFare    ^ distance_ * 3.0.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PremiumRide class	instanceVariableNames: ''!!PremiumRide class methodsFor: 'instance creation' stamp: '3/30/2025 23:20'!newRideWithPickup: pickup dropoff: dropoff distance: distance    | newRide |    newRide := self new.    newRide initializeWithPickup: pickup dropoff: dropoff distance: distance.    ^ newRide.! !