----QUIT----2025-03-12T11:02:16.392497+01:00 Pharo12.0-SNAPSHOT-64bit-ee47bfdbe3.image priorSource: 0!----QUIT----2025-03-12T11:02:16.393147+01:00 Pharo12.0-SNAPSHOT-64bit-ee47bfdbe3.image priorSource: 0!----QUIT----2025-03-12T11:02:36.60791+01:00 Pharo12.0-SNAPSHOT-64bit-ee47bfdbe3.image priorSource: 104!----QUIT----2025-03-12T11:02:36.608659+01:00 Pharo12.0-SNAPSHOT-64bit-ee47bfdbe3.image priorSource: 208!----QUIT/NOSAVE----2025-03-27T09:36:32.889361-04:00 Pharo 12.0 - 64bit (stable).image priorSource: 313!----QUIT/NOSAVE----2025-03-27T09:36:32.913122-04:00 Pharo 12.0 - 64bit (stable).image priorSource: 313!Object << #HelloMessage 	slots: {};	sharedVariables: {};	package: 'Hello Message'! priorSource: 313!----QUIT/NOSAVE----2025-03-28T11:05:20.556731-04:00 Pharo 12.0 - 64bit (stable).image priorSource: 313!----QUIT/NOSAVE----2025-03-28T11:05:26.124409-04:00 Pharo 12.0 - 64bit (stable).image priorSource: 313!!HelloMessage methodsFor: 'nil' stamp: '3/28/2025 11:48'!doYourThingTranscript cr; show: 'Hello, World!!'! !----QUIT----2025-03-28T11:56:03.439952-04:00 Pharo 12.0 - 64bit (stable).image priorSource: 313!----QUIT----2025-03-28T11:56:03.444827-04:00 Pharo 12.0 - 64bit (stable).image priorSource: 1055!Object << #Ride	slots: {};	sharedVariables: {};	package: 'ShareRidingSystem'!Object << #Ride	slots: { #rideID. #pickup. #dropoff. #distance };	package: 'ShareRidingSystem'.!Object << #Ride	slots: { #rideID . #pickup . #dropoff . #distance };	package: 'ShareRidingSystem'	!Object subclass: #BasicLink   instanceVariableNames: 'value nextLink'   classVariableNames: ''	package: 'ShareRidingSystem'!Smalltalk globals removeClassNamed: #AnObsoleteBasicLink!Smalltalk globals removeClassNamed: #AnObsoleteRideSystem!!Ride methodsFor: 'nil' stamp: '3/28/2025 23:39'!setID: newValue    rideID := newValue! !!Ride methodsFor: 'nil' stamp: '3/29/2025 09:58'!rideDetails	Transcript show: 'Ride ID: ', rideID printString; cr;		show: 'Pickup: ', pickup ! !!Ride methodsFor: 'as yet unclassified' stamp: '3/29/2025 09:59' prior: 3863!rideDetails	Transcript show: 'Ride ID: ', rideID printString; cr;		show: 'Pickup: ', pickup ; cr;		show: 'Dropoff: ', dropoff ; cr;      show: 'Distance: ', distance printString, ' miles'; cr;      show: 'Fare: $', (self calculateFare) printString; cr;      show: '--------------------------------'; cr.! !!Ride methodsFor: 'rideDetails' stamp: '3/29/2025 10:01' prior: 4215!rideDetails	Transcript show: 'Ride ID: ', rideID printString; cr;		show: 'Pickup: ', pickup ; cr;		show: 'Dropoff: ', dropoff ; cr;      show: 'Distance: ', distance printString, ' miles'; cr;      "show: 'Fare: $', (self calculateFare) printString; cr;"      show: '--------------------------------'; cr.! !!Ride methodsFor: 'rideDetails' stamp: '3/29/2025 10:05' prior: 4981!rideDetails	Transcript show: 'Ride ID: ', rideID printString; cr;		show: 'Pickup: ', pickup ; cr;		show: 'Dropoff: ', dropoff ; cr;      show: 'Distance: ', distance printString, ' miles'; cr;      "show: 'Fare: $', (self calculateFare) printString; cr;"      show: '--------------------------------'; cr.! !Object << #Ride	slots: { #rideID_ . #pickup_ . #dropoff_ . #distance_ };	package: 'ShareRidingSystem'!!Ride methodsFor: 'rideDetails' stamp: '3/29/2025 10:10' prior: 5751!rideDetails	Transcript show: 'Ride ID: ', rideID_ printString; cr;		show: 'Pickup: ', pickup_ ; cr;		show: 'Dropoff: ', dropoff_ ; cr;      show: 'Distance: ', distance_ printString, ' miles'; cr;      "show: 'Fare: $', (self calculateFare) printString; cr;"      show: '--------------------------------'; cr.! !!Ride methodsFor: 'rideDetails' stamp: '3/29/2025 10:12'!initializeWithPickup: pickup dropoff: dropoff distance: distance    pickup_ := pickup.    dropoff_ := dropoff.    distance_ := distance.    "rideID_ := self class nextID."    ! !Ride removeSelector: #setID:!!Ride methodsFor: 'rideDetails' stamp: '3/29/2025 10:27'!calculateFate	self subclassResponsibility.! !!Ride methodsFor: 'rideDetails' stamp: '3/29/2025 10:28'!calculateFare	self subclassResponsibility.! !Ride removeSelector: #calculateFate!!Ride methodsFor: 'rideDetails' stamp: '3/29/2025 10:29' prior: 6733!rideDetails	Transcript show: 'Ride ID: ', rideID_ printString; cr;		show: 'Pickup: ', pickup_ ; cr;		show: 'Dropoff: ', dropoff_ ; cr;      show: 'Distance: ', distance_ printString, ' miles'; cr;      show: 'Fare: $', self calculateFare printString; cr;      show: '--------------------------------'; cr.! !!Ride class methodsFor: 'nil' stamp: '3/29/2025 10:36'!nextID	Smalltalk at: #RideCounter ifAbsentPut: [ 0 ].	Smalltalk at: #RideCounter put: (Smalltalk at: #RideCounter) + 1.	^ Smalltalk at: #RideCounter.! !!Ride methodsFor: 'rideDetails' stamp: '3/29/2025 10:37' prior: 7487!initializeWithPickup: pickup dropoff: dropoff distance: distance	 rideID_ := self class nextID.  	 pickup_ := pickup.    dropoff_ := dropoff.    distance_ := distance.       ! !Object << #MyClass	layout: FixedLayout;	traits: {};	slots: {};	sharedVariables: {};	sharedPools: {};	tag: '' ;	package: 'ShareRidingSystem'!Ride << #StandardRide 	slots: {};	package: 'ShareRidingSystem'!!StandardRide methodsFor: 'rideMethods' stamp: '3/29/2025 10:45'!calculateFare	^ distance_ * 1.5.! !!StandardRide class methodsFor: 'nil' stamp: '3/29/2025 10:49'!newRideWithPickup: pickup dropoff: dropoff distance: distance	^ self new initializeWithPickup: pickup dropoff: dropoff distance: distance; yourself.! !!StandardRide class methodsFor: 'instance creation' stamp: '3/29/2025 10:51'!new 	self error: 'Use newRideWithPickup:dropoff:distance: instead of new'.! !StandardRide class removeSelector: #new!Ride << #PremiumRide 	slots: {};	package: 'ShareRidingSystem'!!PremiumRide methodsFor: 'rideMethods' stamp: '3/29/2025 11:01'!calculateFare	^ distance_ * 3.0.! !!PremiumRide class methodsFor: 'nil' stamp: '3/29/2025 11:02'!newRideWithPickup: pickup dropoff: dropoff distance: distance	^ self new initializeWithPickup: pickup dropoff: dropoff distance: distance; yourself.! !Object << #Driver	slots: { #driverID_ . #name_ . #rating . #assignedRides };	package: 'ShareRidingSystem'!Smalltalk globals removeClassNamed: #AnObsoleteMyClass!Object << #Driver	slots: { #driverID_ . #name_ . #rating_ . #assignedRides_ };	package: 'ShareRidingSystem'!!Driver class methodsFor: 'nil' stamp: '3/29/2025 13:42'!newDriverWithName: name rating: rating	^ self new initializeWithName: name rating: rating; yourself.! !!Driver methodsFor: 'nil' stamp: '3/29/2025 13:45'!initializeWithName: name rating: rating	name_ := name.	rating_ := rating.	driverID_ := self class nextID.! !!Driver class methodsFor: 'nil' stamp: '3/29/2025 13:46'!nextID    Smalltalk at: #DriverCounter ifAbsentPut: [0].    Smalltalk at: #DriverCounter put: (Smalltalk at: #DriverCounter) + 1.    ^ Smalltalk at: #DriverCounter.! !!Driver methodsFor: 'initialization' stamp: '3/29/2025 13:48' prior: 13341!initializeWithName: name rating: rating	name_ := name.	rating_ := rating.	driverID_ := self class nextID.	assignedRides_ := OrderedCollection new.    ^ self.! !!Driver methodsFor: 'nil' stamp: '3/29/2025 13:54'!addRide: ride	assignedRides_ add: ride.	Transcript show: 'Ride added to driver: ', self name; cr.! !!Driver methodsFor: 'adding' stamp: '3/29/2025 13:54' prior: 14611!addRide: ride	assignedRides_ add: ride.	Transcript show: 'Ride added to driver: ', name_ ; cr.! !!Driver methodsFor: 'nil' stamp: '3/29/2025 13:56'!getDriverInfo    Transcript show: 'Driver ID: ', driverID_ printString; cr.    Transcript show: 'Name: ', name_; cr.    Transcript show: 'Rating: ', rating_ printString; cr.    Transcript show: 'Assigned Rides: ', assignedRides_ size printString; cr.    Transcript show: '-----------------------------'; cr.! !Object << #MyClass	layout: FixedLayout;	traits: {};	slots: {};	sharedVariables: {};	sharedPools: {};	tag: '' ;	package: 'ShareRidingSystem'!Object << #Rider	slots: {};	package: 'ShareRidingSystem'!Object << #Rider	slots: { #riderID_ . #name_ . #requestedRides };	package: 'ShareRidingSystem'!!Rider class methodsFor: 'nil' stamp: '3/29/2025 14:08'!newRiderWithName: name    ^ self new initializeWithName: name; yourself.! !!Rider class methodsFor: 'instance creation' stamp: '3/29/2025 14:09' prior: 16621!newRiderWithName: name	"Class method to create a new rider with a name"    ^ self new initializeWithName: name; yourself.! !Object << #Rider	slots: { #riderID_ . #name_ . #requestedRides_ };	package: 'ShareRidingSystem'!!Rider methodsFor: 'nil' stamp: '3/29/2025 14:10'!initializeWithName: name    name_ := name.    "Assign a unique ID to the rider"    riderID_ := self class nextID.    requestedRides_ := OrderedCollection new.    ^ self.! !!Rider methodsFor: 'initialization' stamp: '3/29/2025 14:11' prior: 17499!initializeWithName: name  	 "Instance method to initialize rider attributes"  	 name_ := name.    "Assign a unique ID to the rider"    riderID_ := self class nextID.    requestedRides_ := OrderedCollection new.    ^ self.! !!Rider methodsFor: 'nil' stamp: '3/29/2025 14:12'!nextID    Smalltalk at: #RiderCounter ifAbsentPut: [0].    Smalltalk at: #RiderCounter put: (Smalltalk at: #RiderCounter) + 1.    ^ Smalltalk at: #RiderCounter.! !Rider removeSelector: #nextID!!Rider class methodsFor: 'nil' stamp: '3/29/2025 14:13'!nextID    Smalltalk at: #RiderCounter ifAbsentPut: [0].    Smalltalk at: #RiderCounter put: (Smalltalk at: #RiderCounter) + 1.    ^ Smalltalk at: #RiderCounter.! !!Rider methodsFor: 'initialization' stamp: '3/29/2025 14:14' prior: 18005!initializeWithName: name  	 "Instance method to initialize rider attributes"  	 name_ := name.    "Assign a unique ID to the rider"    riderID_ := self class nextID.    requestedRides_ := OrderedCollection new.    ^ self.! !!Rider class methodsFor: 'as yet unclassified' stamp: '3/29/2025 14:15' prior: 19081!nextID  	 "Class method to generate unique rider ID"  	 Smalltalk at: #RiderCounter ifAbsentPut: [0].    Smalltalk at: #RiderCounter put: (Smalltalk at: #RiderCounter) + 1.    ^ Smalltalk at: #RiderCounter.! !!Rider methodsFor: 'initialization' stamp: '3/29/2025 14:16'!requestRide: ride    requestedRides_ add: ride.    Transcript show: 'Ride requested by rider: ', name_; cr.! !!Rider methodsFor: 'initialization' stamp: '3/29/2025 14:17' prior: 20751!requestRide: ride  	 "Allow a rider to request a ride and store it in requestedRides"  	 requestedRides_ add: ride.    Transcript show: 'Ride requested by rider: ', name_; cr.! !!Rider methodsFor: 'initialization' stamp: '3/29/2025 14:19'!viewRides    Transcript show: 'Rides requested by ', name_ , ':'; cr.    requestedRides_ isEmpty         ifTrue: [Transcript show: 'No rides requested.'; cr]        ifFalse: [            requestedRides_ do: [:ride |                ride rideDetails.            ].        ].! !!Rider methodsFor: 'initialization' stamp: '3/29/2025 14:19' prior: 21615!viewRides  	 "View all requested rides"  	 Transcript show: 'Rides requested by ', name_ , ':'; cr.    requestedRides_ isEmpty         ifTrue: [Transcript show: 'No rides requested.'; cr]        ifFalse: [            requestedRides_ do: [:ride |                ride rideDetails.            ].        ].! !Object << #SharingRideSystem	slots: { #drivers . #riders . #driverQueue . #riderQueue };	package: 'ShareRidingSystem'!!SharingRideSystem methodsFor: 'nil' stamp: '3/29/2025 22:00'!initialize 	drivers := Dictionary new.	riders := Dictionary new.	driverQueue := OrderedCollection new.! !!SharingRideSystem methodsFor: 'initialization' stamp: '3/29/2025 22:07' prior: 23333!initialize 	drivers := Dictionary new.	riders := Dictionary new.	driverQueue := OrderedCollection new.	riderQueue := OrderedCollection new.	Transcript show: 'SharingRideSystem created'; cr.! !!SharingRideSystem methodsFor: 'nil' stamp: '3/29/2025 22:09'!addDriver: driver 	drivers add: driver.! !!Driver methodsFor: 'nil' stamp: '3/29/2025 22:16'!getID	^ driverID_.! !!Rider methodsFor: 'nil' stamp: '3/29/2025 22:17'!getID 	^ riderID_.! !!SharingRideSystem methodsFor: 'nil' stamp: '3/29/2025 22:21'!addDrivertoQueue: driver	"Add a driver to the queue"	driverQueue add: driver.! !!SharingRideSystem methodsFor: 'adding' stamp: '3/29/2025 22:21' prior: 24247!addDriver: driver 	drivers at: driver getID put: driver.	self addDrivertoQueue: driver.! !!SharingRideSystem methodsFor: 'adding' stamp: '3/29/2025 22:22' prior: 25083!addDriver: driver 	"Add a driver to the system and queue"	drivers at: driver getID put: driver.	self addDrivertoQueue: driver.! !!SharingRideSystem methodsFor: 'initialization' stamp: '3/29/2025 22:22' prior: 23725!initialize 	"Initialize ride-sharing system with empty collections"	drivers := Dictionary new.	riders := Dictionary new.	driverQueue := OrderedCollection new.	riderQueue := OrderedCollection new.	Transcript show: 'SharingRideSystem created'; cr.! !!SharingRideSystem methodsFor: 'nil' stamp: '3/29/2025 22:23'!addRidertoQueue: rider	riderQueue add: rider.! !!SharingRideSystem methodsFor: 'adding' stamp: '3/29/2025 22:24' prior: 26503!addRidertoQueue: rider	"Add a rider to the queue"	riderQueue add: rider.! !!SharingRideSystem methodsFor: 'nil' stamp: '3/29/2025 22:25'!addRider: rider	riders at: rider getID put: rider.	self addRidertoQueue: rider.! !!SharingRideSystem methodsFor: 'adding' stamp: '3/29/2025 22:25' prior: 27043!addRider: rider	"Add a rider to the system and queue"	riders at: rider getID put: rider.	self addRidertoQueue: rider.! !!SharingRideSystem methodsFor: 'nil' stamp: '3/29/2025 22:27'!getRider	^ riderQueue isEmpty ifTrue: [ nil ] ifFalse: [ riderQueue removeFirst ].! !!SharingRideSystem methodsFor: 'nil' stamp: '3/29/2025 22:28'!getDriver	^ driverQueue isEmpty ifTrue: [ nil ] ifFalse: [ driverQueue removeFirst ].! !!SharingRideSystem methodsFor: 'as yet unclassified' stamp: '3/29/2025 22:29' prior: 28045!getDriver	"Retrieve the next driver in the queue, or return nil if queue is empty"	^ driverQueue isEmpty ifTrue: [ nil ] ifFalse: [ driverQueue removeFirst ].! !!SharingRideSystem methodsFor: 'as yet unclassified' stamp: '3/29/2025 22:29' prior: 27745!getRider	"Retrieve the next rider in the queue, or return nil if queue is empty"	^ riderQueue isEmpty ifTrue: [ nil ] ifFalse: [ riderQueue removeFirst ].! !!SharingRideSystem methodsFor: 'nil' stamp: '3/29/2025 22:31'!createRidePickup: pickup dropoff: dropoff distance: distance rideType: rideType	"Create a ride based on the selected ride type (1 for Standard, else Premium)"	^ (rideType = 1)		ifTrue: [StandardRide newRideWithPickup: pickup dropoff: dropoff distance: distance]		ifFalse: [PremiumRide newRideWithPickup: pickup dropoff: dropoff distance: distance].! !----SNAPSHOT----2025-03-29T23:00:11.56138-04:00 Pharo 12.0 - 64bit (stable).1.image priorSource: 1153!----SNAPSHOT----2025-03-29T23:00:11.563314-04:00 Pharo 12.0 - 64bit (stable).1.image priorSource: 15038!